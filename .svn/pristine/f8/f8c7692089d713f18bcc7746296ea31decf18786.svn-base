<?php

//~ namespace app\controllers;
namespace frontend\controllers;

use Yii;
use app\models\Student;
use app\models\StudentSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;
use kartik\mpdf\Pdf;
use yii\filters\AccessControl;

/**
 * StudentController implements the CRUD actions for Student model.
 */
class StudentController extends Controller
{
		
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index', 'view', 'update', 'delete'],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['view'],
                        'roles' => ['student'],
                    ],
                    [
                        'allow' => true,
                        'actions' => ['create', 'update'],
                        'roles' => ['studentAdmin'],
                    ],    
                    [
                        'allow' => true,
                        'actions' => ['index', 'update', 'view', 'delete'],
                        'roles' => ['admin'],
                    ],               
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Student models.
     * @return mixed
     */
    public function actionIndex()
    {
        // if (\Yii::$app->user->can('admin')) {
            $searchModel = new StudentSearch();
            $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

            return $this->render('index', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        // } else {
        //     throw new \Exception('You are not allowed to access this page');
        // }
    }

    /**
     * Displays a single Student model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        if (Yii::$app->request->isAjax) {
			return $this->renderAjax('view', [
				'model' => $this->findModel($id),
            ]);
		} else {
            return $this->render('view', [
				'model' => $this->findModel($id),
			]);
        }   
    }

    /**
     * Creates a new Student model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        if (\Yii::$app->user->can('studentAdmin')) {
    		// Get logged in user_id
    		$user_id = \Yii::$app->user->identity->id;
    	
            $model = new Student();
            $model->nationality = 'Motswana';
            $model->create_user_id = $user_id;
            $model->create_date = date('Y-m-d');

            if ($model->load(Yii::$app->request->post())) {
                        //~ // get the instance of the uploaded file
                        $imageName = $model->fullname . '_' . $model->create_date;
                        
                        //$model->photo = UploadedFile::getInstance($model,'photo');
                        $model->file = UploadedFile::getInstance($model, 'file');
                        
                        if($model->file != null){
                            $model->file->saveAs('uploads/photos/students/'.$imageName.'.'.$model->file->extension);
                                            
                            // save the path in the db column
                            $model->photo = 'uploads/photos/students/'.$imageName.'.'.$model->file->extension;
                        }
                        
                        $model->save();
            }elseif (Yii::$app->request->isAjax) {
                return $this->renderAjax('_form', [
                            'model' => $model
                ]);
            } else {
                return $this->render('create', [
                    'model' => $model,
                ]);
            }
        }
    }

    /**
     * Updates an existing Student model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
		// Store return Url
		$this->storeReturnUrl();
		
		// Get logged in user_id
		$user_id = \Yii::$app->user->identity->id;
		
		//get js scripts	
		//$cs = Yii::app()->clientScript;
		
        $model = $this->findModel($id);
        $model->file = $model->photo;
        $model->update_user_id = $user_id;
        $model->update_date = date('Y-m-d');        

        if ($model->load(Yii::$app->request->post())) {
                    // get the instance of the uploaded file
                    // $imageName = $model->fullname . '_' . $model->create_date;
                    $imageName = $model->fullname . '_' . \date('jmYHis');
                    
                    $model->file = UploadedFile::getInstance($model, 'file');
                    
                    if($model->file != null){
                        $model->file->saveAs('uploads/photos/students/'.$imageName.'.'.$model->file->extension);
                                        
                        // save the path in the db column
                        $model->photo = 'uploads/photos/students/'.$imageName.'.'.$model->file->extension;
                    }

                    $model->save();

            return $this->redirect(['view', 'id' => $model->student_id]);
        }elseif (Yii::$app->request->isAjax) {
			//$cs->scriptMap['jquery.js'] = false;
            return $this->renderAjax('_form', [
                        'model' => $model
            ]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Student model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionReport($id){

        $model = $this->findModel($id);

        // get your HTML raw content without any layouts or scripts
        $content = $this->renderPartial('_view-report', [ 'model' => $model]);

        // setup kartik\mpdf\Pdf component
        $pdf = new Pdf([
            // set to use core fonts only
            'mode' => Pdf::MODE_CORE, 
            // A4 paper format
            'format' => Pdf::FORMAT_A4, 
            // portrait orientation
            'orientation' => Pdf::ORIENT_PORTRAIT, 
            // stream to browser inline
            'destination' => Pdf::DEST_BROWSER, 
            // your html content input
            'content' => $content,  
            // format content from your own css file if needed or use the
            // enhanced bootstrap css built by Krajee for mPDF formatting 
            'cssFile' => '@vendor/kartik-v/yii2-mpdf/assets/kv-mpdf-bootstrap.min.css',
            // any css to be embedded if required
            'cssInline' => '.kv-heading-1{font-size:18px}', 
             // set mPDF properties on the fly
            'options' => ['title' => 'Student Report'],
             // call mPDF methods on the fly
            'methods' => [ 
                'SetHeader'=>['SKYMOUSE EMIS'], 
                'SetFooter'=>['Student Report|{PAGENO}|{DATE j-F-Y}'],
            ]
        ]);

        // return the pdf output as per the destination setting
        return $pdf->render(); 
    }

    public function actionListReport()
    {

        $searchModel = new StudentSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        // get your HTML raw content without any layouts or scripts
        $content = $this->renderPartial('_index-report', [ 
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            ]);

        // setup kartik\mpdf\Pdf component
        $pdf = new Pdf([
            // set to use core fonts only
            'mode' => Pdf::MODE_CORE, 
            // A4 paper format
            'format' => Pdf::FORMAT_A4, 
            // portrait orientation
            'orientation' => Pdf::ORIENT_LANDSCAPE, 
            // stream to browser inline
            'destination' => Pdf::DEST_BROWSER, 
            // your html content input
            'content' => $content,  
            // format content from your own css file if needed or use the
            // enhanced bootstrap css built by Krajee for mPDF formatting 
            'cssFile' => '@vendor/kartik-v/yii2-mpdf/assets/kv-mpdf-bootstrap.min.css',
            // any css to be embedded if required
            'cssInline' => '.kv-heading-1{font-size:18px}', 
             // set mPDF properties on the fly
            'options' => [
                'title' => 'Student List Report',
                'subject' => 'Student List Report',
                // 'output' => 'emis_student_list_report.pdf',
                'author' => 'SKYMOUSE EMIS',
                'creator' => 'SKYMOUSE EMIS'
                ],
             // call mPDF methods on the fly
            'methods' => [ 
                'SetHeader'=>['SKYMOUSE EMIS'], 
                'SetFooter'=>['Student List Report|Page {PAGENO}|{DATE j-F-Y}'],
                'SetProtection' => [array('copy','print'), '', 'p@ssword1'],
            ]
        ]);

        // return the pdf output as per the destination setting
        return $pdf->render('emis_student_list_report.pdf', 'D'); 
    }

    /**
     * Finds the Student model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Student the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Student::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    
    private function storeReturnUrl()
	{
		Yii::$app->user->returnUrl = Yii::$app->request->url;
	}
}
